# Instruction for Automatic Addition of a New Method to the MCP Server (Serpstat)

## Input Data:
- OpenAPI specification of the method (json, yaml, or object)
- Method name (e.g., get_domain_regions_count)
- Method description (human-readable, for documentation)

## Checklist and Step-by-Step Plan

### 1. Validation Schema and Parameter Types
- Extract method parameters from OpenAPI (or request schema).
- Create a Zod schema for parameters in src/utils/validation.ts.
  - Name: <methodName>Schema (e.g., domainRegionsCountSchema)
  - Type: <MethodName>Params (e.g., DomainRegionsCountParams)
  - Check: all required/optional, patterns, enum, min/max, default.
- Export the schema and type.

### 2. Response Types
- Extract response structure from OpenAPI (or response schema).
- Add interfaces to src/types/serpstat.ts:
  - <MethodName>Response (e.g., DomainRegionsCountResponse)
  - Nested types (e.g., DomainRegionCount)
- Check: all fields, nesting, types, arrays, optionality.

### 3. Service
- In src/services/domain_tools.ts:
  - Add method get<MethodNameCamel>(params: <MethodName>Params): Promise<<MethodName>Response>
  - Use the correct SerpstatRequest.method (e.g., SerpstatDomainProcedure.getRegionsCount)
  - Log input parameters and result.
  - Handle missing result (error).

### 4. Handler
- In src/handlers/domain_tools.ts:
  - Create class <MethodNamePascal>Handler extends BaseHandler
  - getName() — returns the method name (e.g., get_domain_regions_count)
  - getDescription() — returns the method description
  - getInputSchema() — must return a JSON Schema object with type: "object" (NOT a Zod schema!).
    - If using Zod, convert via zod-to-json-schema or describe the schema manually, as in other methods.
    - Ensure the type field is always "object" (otherwise the server cannot build tools/list and you will get an invalid_literal error).
  - handle(call: MCPToolCall): Promise<MCPToolResponse>
    - try/catch
    - Validate via .parse(call.arguments)
    - Call the service
    - return this.createSuccessResponse(result)
    - Handle errors via createErrorResponse
- Check: style and signatures match other handlers.

### 5. Registration
- In src/server.ts:
  - Import the new handler
  - Add to the handlers array
  - Check that getName() matches the MCP name

### 6. Tests
- In src/__tests__/services/domain_tools.test.ts: (if the method is from another domain area, create a new file in the appropriate folder by analogy)
  - Schema test: valid/invalid parameters
  - Service test: mock makeRequest, check result
  - Handler test:
    - Mock the service
    - handle({ name, arguments })
    - Check res.content, parse JSON, check structure
    - Check mock call
- Check: all tests pass, response structure matches expectations.

### 7. Documentation
- In README.md:
  - Add the method to the MCP Tools table only, preserve the order and structure.


### 8. IMPORTANT
- Always use a consistent import style (without .js)
- Always use call.arguments in handlers
- In handler tests, check res.content, not res.result
- Always use strict typing
- Check that all required fields are truly required
- Check that all optional fields are handled correctly
- Check that the response structure fully matches OpenAPI
- After all changes, run tests and fix errors until all pass

---

## Result
Strictly follow this checklist, do not skip any points. Check all details to ensure the integration of a new method is error-free, tests pass, and documentation is up-to-date and complete.
